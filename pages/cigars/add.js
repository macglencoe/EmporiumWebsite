import { useEffect, useState } from "react"
import Layout from "../../components/layout"
import CrudForm from "../../components/crudForm";
import { useRouter } from "next/router";

export const getStaticProps = async () => {
    const data = await import('../../public/data/consolidated_cigars.json');
    return {
        props: {
            data: data.default
        },
    };
};

const AddCigarPage = (props) => {
    const router = useRouter();
    const [allCigarsLocalData, setAllCigarsLocalData] = useState(null);

    const sizeFields = {
        "Size": "",
        "Barcode": "",
        "In_Stock": "",
        "Price": ""
    }
    const cigarFields = {
        'Cigar Brand': {
            required: true,
            type: 'string',
            message: 'Cigar brand is required'
        },
        'Cigar Name': {
            required: true,
            type: 'string',
            message: 'Cigar name is required'
        },
        'Wrapper': {
            type: 'string'
        },
        'Binder': {
            type: 'string'
        },
        'Filler': {
            type: 'string'
        },
        "Flavor_Profile": {
            type: 'string'
        },
        "Strength_Profile": {
            type: 'string'
        },
        "Sizes": {
            type: 'array',
            fields: {
                "Size": {
                    type: 'string'
                },
                "Barcode": {
                    type: 'string'
                },
                "In_Stock": {
                    type: 'string'
                },
                "Price": {
                    type: 'string'
                }
            }
        }
    }

    const originalData = {
        'Cigar Brand': "",
        'Cigar Name': "",
        'Wrapper': "",
        'Binder': "",
        'Filler': "",
        "Flavor_Profile": "",
        "Strength_Profile": "",
        "Sizes": [{}],
    }

    useEffect(() => {
        if (typeof window !== 'undefined') {
            setAllCigarsLocalData(JSON.parse(localStorage.getItem('tempData_cigars')));
        }
    }, []);

    /**
     * Generates a slug from the given local cigar data.
     * The slug is generated by concatenating the cigar brand and name, converting to lower case, removing non-alphanumeric and whitespace characters, and replacing multiple spaces with a single hyphen.
     * @param {Object} localData - The local cigar data
     * @returns {String} - The slug
     */
    const generateSlug = (localData) => {
        if (localData) {
            const slug = (localData['Cigar Brand'] + ' ' + localData['Cigar Name']).toLowerCase().replace(/[^a-z0-9\s]/gi, '').replace(/\s+/g, '-');
            return slug;
        }
    }
    /**
     * Checks if the slug generated from the given local cigar data is unique among all cigars.
     * The slug is considered unique if no other cigar has the same slug.
     * @param {Object} localData - The local cigar data
     * @returns {Boolean} - True if the slug is unique, false otherwise
     */
    const isSlugUnique = (localData) => {
        if (localData) {
            const slugExists = allCigarsLocalData.some((cigar) => cigar.slug !== localData.slug && cigar.slug === generateSlug(localData));
            return !slugExists;
        }
    }
    /**
     * Saves changes to the local cigar data.
     * Before saving changes, checks if the slug generated from the new data is unique.
     * If it's not, alerts the user and returns without saving.
     * @param {Object} localData - The local cigar data to be saved.
     * @returns {void}
     */
    const saveChanges = (localData) => {
        if (!isSlugUnique(localData)) {
            alert('Slug already exists. Please choose a different name.');
            return;
        }
        localData['slug'] = generateSlug(localData);
        localData['Date Added'] = new Date().toISOString().slice(0, 10);
        let tempData = JSON.parse(localStorage.getItem('tempData_cigars'));
        if (!tempData) {
            tempData = props.data;
            localStorage.setItem('tempData_cigars', JSON.stringify(tempData));
        }
        const index = tempData.findIndex(item => item.slug === localData.slug);
        if (index !== -1) {
            tempData[index] = localData;
            // Remove any non-objects from Sizes array
            tempData[index].Sizes = tempData[index].Sizes.filter(size => typeof size === 'object');
        } else {
            tempData.push(localData);
        }
        localStorage.setItem('tempData_cigars', JSON.stringify(tempData));
        router.push('/cigars');
    }

    return (


        <>
            <Layout>
                <CrudForm
                    pullTempData={() => originalData}
                    pullAllTempData={() => allCigarsLocalData}
                    dataFields={cigarFields}
                    dataOriginal={originalData}
                    arrayFields={{
                        "Sizes": sizeFields
                    }}
                    generateSlug={generateSlug}
                    isSlugUnique={isSlugUnique}
                    onSubmit={saveChanges}

                ></CrudForm>
            </Layout>
        </>
    )
}

export default AddCigarPage